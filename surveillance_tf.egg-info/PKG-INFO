Metadata-Version: 2.4
Name: surveillance_tf
Version: 0.1.0
Summary: TensorFlow MIL anomaly detection reproduction with DCSASS demo
Author: Surveillance TF Team
License: MIT
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: tensorflow>=2.12
Requires-Dist: tensorflow-hub
Requires-Dist: opencv-python
Requires-Dist: imageio
Requires-Dist: imageio-ffmpeg
Requires-Dist: numpy
Requires-Dist: scipy
Requires-Dist: scikit-learn
Requires-Dist: pandas
Requires-Dist: streamlit
Requires-Dist: weasyprint
Requires-Dist: jinja2
Requires-Dist: pyyaml
Requires-Dist: rich
Requires-Dist: tqdm
Requires-Dist: matplotlib
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Dynamic: license-file

# Surveillance-TF

Reproducible TensorFlow 2.x implementation of the multiple-instance learning anomaly detector from Sultani et al. (CVPR 2018), extended with a DCSASS-based runtime demo that performs sliding-window inference, incident management, evidence clipping, and PDF reporting via Streamlit.

## Quickstart
1. **Environment**
   ```bash
   python -m venv .venv
   source .venv/bin/activate
   pip install -r requirements.txt
   pip install -e .
   ```
2. **Datasets**
   - **DCSASS**: authenticate with Kaggle, then run `python -m surveillance_tf.data.dcsass_loader --download ./data/dcsass`. After extracting the dataset, create CSV splits via `python -m surveillance_tf.data.dcsass_loader --data_root ./data/dcsass --make_splits ./data/dcsass/splits`.
   - **UCF-Crime**: request access from [http://crcv.ucf.edu/data/UCF-Crime/](http://crcv.ucf.edu/data/UCF-Crime/). Extract videos under `data/ucf_crime/` and build split CSVs matching `video,label` columns.
3. **Training**
   ```bash
   python -m surveillance_tf.train.train_mil_ucfcrime \
     --data_root ./data/ucf_crime \
     --train_csv ./data/ucf_crime/train.csv \
     --val_csv ./data/ucf_crime/val.csv \
     --out ./outputs/ucf_run1
   ```
4. **Evaluation**
   ```bash
   python -m surveillance_tf.train.eval_mil_ucfcrime \
     --data_root ./data/ucf_crime \
     --test_csv ./data/ucf_crime/test.csv \
     --ckpt ./models/movinet/ckpt_best \
     --out ./outputs/ucf_run1
   ```
5. **Demo**
   ```bash
   python -m surveillance_tf.demo.coord \
     --video ./samples/entrance.mp4 \
     --ckpt ./models/movinet/ckpt_best \
     --config ./configs/thresholds.yaml \
     --fps 25
   ```
6. **Streamlit UI**
   ```bash
   python -m streamlit run surveillance_tf/demo/ui_app.py
   ```

## Repository Map
- `configs/` – Operating thresholds, camera metadata, class labels.
- `surveillance_tf/utils/` – Logging, seeding, metrics, geometric utilities, buffering, clip writers.
- `surveillance_tf/data/` – Video decoders, segment builders, tf.data loaders for UCF-Crime and DCSASS with CLI helpers.
- `surveillance_tf/models/` – MoViNet encoder and MIL scoring head.
- `surveillance_tf/losses/` – Ranking, sparsity, and smoothness losses.
- `surveillance_tf/train/` – Training and evaluation pipelines with SavedModel export hooks.
- `surveillance_tf/demo/` – SORT tracker, fusion, incident coordinator, SQLite DAO, responder utilities, Streamlit app, HTML templates.
- `surveillance_tf/export/` – SavedModel exporter CLI.
- `tests/` – Pytest-based unit and integration checks running on synthetic data.

## Citation
```
@inproceedings{sultani2018real,
  title     = {Real-World Anomaly Detection in Surveillance Videos},
  author    = {Sultani, Waqas and Chen, Chen and Shah, Mubarak},
  booktitle = {Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition},
  year      = {2018}
}
```

## Safety & Privacy
- Only process footage you are authorised to handle; comply with local laws and organisational policy.
- Securely store datasets, incident logs, and generated reports; encrypt disks where possible.
- Review detection thresholds before deployment to minimise false alarms and privacy risks.
- Anonymise or redact personal data in exported clips or reports shared outside the security team.
